{"version":3,"sources":["Die.js","RollDice.js","App.js","serviceWorker.js","index.js"],"names":["Die","react_default","a","createElement","className","concat","this","props","number","Component","RollDice","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addAnimation","document","querySelector","classList","add","setState","loading","removeAnimation","remove","state","firstDie","secondDie","randomNumber","bind","assertThisInitialized","changeNumber","numbers","Math","floor","random","length","_this2","setTimeout","firstNumber","secondNumber","src_Die_0","onClick","App","src_RollDice_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAceA,0LARP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAS,eAAAC,OAAiBC,KAAKC,MAAMC,OAA5B,uBALVC,cCoEHC,qBAlEX,SAAAA,EAAYH,GAAO,IAAAI,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAAI,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAV,KAAMC,KA8BVU,aAAe,WACXC,SACKC,cAAc,kBACdC,UAAUC,IAAI,WAAY,gBAC/BH,SAASC,cAAc,oBAAoBC,UAAUC,IAAI,WACzDV,EAAKW,SAAS,CAAEC,SAAS,KApCVZ,EAuCnBa,gBAAkB,WACdN,SACKC,cAAc,kBACdC,UAAUK,OAAO,WAAY,gBAClCP,SAASC,cAAc,oBAAoBC,UAAUK,OAAO,WAC5Dd,EAAKW,SAAS,CAAEC,SAAS,KA1CzBZ,EAAKe,MAAQ,CACTC,SAAU,MACVC,UAAW,MACXL,SAAS,GAEbZ,EAAKkB,aAAelB,EAAKkB,aAAaC,KAAlBlB,OAAAmB,EAAA,EAAAnB,CAAAD,IACpBA,EAAKqB,aAAerB,EAAKqB,aAAaF,KAAlBlB,OAAAmB,EAAA,EAAAnB,CAAAD,IARLA,8EAYf,IAAMsB,EAAU,CAAC,MAAO,MAAO,QAAS,OAAQ,OAAQ,OAExD,OAAOA,EADQC,KAAKC,MAAMD,KAAKE,SAAWH,EAAQI,gDAIvC,IAAAC,EAAAhC,KACXA,KAAKW,eACLsB,WAAW,WACPD,EAAKd,mBACN,KAEHe,WAAW,WACP,IAAMC,EAAcF,EAAKT,eACzBS,EAAKhB,SAAS,CAAEK,SAAUa,IAC1B,IAAMC,EAAeH,EAAKT,eAC1BS,EAAKhB,SAAS,CAAEM,UAAWa,KAC5B,sCAoBH,OACIxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACuC,EAAD,CAAKlC,OAAQF,KAAKoB,MAAMC,WACxB1B,EAAAC,EAAAC,cAACuC,EAAD,CAAKlC,OAAQF,KAAKoB,MAAME,aAE3BtB,KAAKoB,MAAMH,QACRtB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAlB,gBAEIH,EAAAC,EAAAC,cAAA,UAAQwC,QAASrC,KAAK0B,aAAc5B,UAAU,mBAA9C,sBA1DDK,oBCWRmC,MAXf,WACE,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,cAEJH,EAAAC,EAAAC,cAAC0C,EAAD,QCEgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASnC,SAASoC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b96d7fc4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Die.css';\n\nclass Die extends Component {\n\n    render() {\n        return (\n            <div className=\"Die\">\n                <i className={`fas fa-dice-${this.props.number} Die-dice`}></i>\n            </div>\n        )\n    }\n}\n\nexport default Die;","import React, { Component } from \"react\";\nimport Die from \"./Die\";\nimport \"./RollDice.css\";\n\nclass RollDice extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstDie: \"one\",\n            secondDie: \"two\",\n            loading: false\n        };\n        this.randomNumber = this.randomNumber.bind(this);\n        this.changeNumber = this.changeNumber.bind(this);\n    }\n\n    randomNumber() {\n        const numbers = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"];\n        const random = Math.floor(Math.random() * numbers.length);\n        return numbers[random];\n    }\n\n    changeNumber() {\n        this.addAnimation();\n        setTimeout(() => {\n            this.removeAnimation();\n        }, 1000);\n\n        setTimeout(() => {\n            const firstNumber = this.randomNumber();\n            this.setState({ firstDie: firstNumber });\n            const secondNumber = this.randomNumber();\n            this.setState({ secondDie: secondNumber });\n        }, 500);\n    }\n\n    addAnimation = () => {\n        document\n            .querySelector(\".RollDice-dice\")\n            .classList.add(\"animated\", \"bounceInDown\");\n        document.querySelector(\".RollDice-button\").classList.add(\"loading\");\n        this.setState({ loading: true });\n    };\n\n    removeAnimation = () => {\n        document\n            .querySelector(\".RollDice-dice\")\n            .classList.remove(\"animated\", \"bounceInDown\");\n        document.querySelector(\".RollDice-button\").classList.remove(\"loading\");\n        this.setState({ loading: false });\n    };\n\n    render() {\n        return (\n            <div className=\"RollDice\">\n                <div className=\"RollDice-dice\">\n                    <Die number={this.state.firstDie} />\n                    <Die number={this.state.secondDie} />\n                </div>\n                {this.state.loading ? (\n                    <button className=\"RollDice-button\">Rolling ....</button>\n                ) : (\n                        <button onClick={this.changeNumber} className=\"RollDice-button\">\n                            Roll Dice!\n          </button>\n                    )}\n            </div>\n        );\n    }\n}\n\nexport default RollDice;\n","import React from 'react';\nimport RollDice from './RollDice';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <div>\n        <h1 className=\"heading-1\">Roll Dice</h1>\n    </div>\n    <RollDice />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}